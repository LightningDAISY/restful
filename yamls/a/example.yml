openapi: "3.0.1"
info:
  title: "API仕様書サンプル"
  description: >-
    OpenAPI3.0.2のYAMLサンプルです。<br />
    このように複数行に書くことができます。
  termsOfService: "利用規約のURI"
  contact:
    name: "M.Mano"
    email: "mano@q-co.jp"
    url: "http://54.249.50.37/"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  version: "0.0.1"
servers:
  - url: "https://testshop.adidas.jp{basePath}"
    description: "test server"
    variables:
      basePath:
        default: "/f/v1/pri"
  - url: "http://adidas-dev13.bb-f.net{basePath}"
    description: "development 1"
    variables:
      basePath:
        default: "/f/v1/pri"

tags:
  - name: userdata
    description: Find out about the userdata
  - name: signup
    description: About a new user
paths:
  "/user/list":
    get:
      description: "ユーザリスト取得"
      tags:
        - userdata
      operationId: "getUserList"
      parameters:
        - name: p
          in: query
          description: "ページ番号"
          required: false
          schema:
            type: integer
            format: int32
          example: 1
        - name: "n"
          in: query
          description: "ページあたり件数"
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: "c"
          in: query
          description: "カテゴリ"
          required: false
          schema:
            type: string
            minLength: 0
            maxLength: 12
            default: "gold"
          example: "gold"
        - name: "birthday"
          in: query
          description: "生年月日"
          required: false
          schema:
            type: string
            format: date
          example: "gold"
        - name: "userId"
          in: cookie
          description: "nginx振り分け用ユーザID"
          required: false
          schema:
            type: integer
            format: int64
          example: 224
      responses:
        "200":
          description: "ユーザ配列"
          headers:
            X-User-ID:
              schema:
                type: integer
          content:
            application/json:
              schema:
                # arrayの要素はitemsの下に書きます
                type: array
                items:
                  # objectの要素はpropertiesの下に書きます
                  type: object
                  properties:
                    userId:
                      type: integer
                      format: int64
                    userName:
                      type: string
                  example:
                  - userId: 1
                    userName: user1
                  - userId: 2
                    userName: user2
                  - userId: 3
                    userName: user3
        default:
          description: "200以外 (なんかエラーかも)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: "エラーコード"
                    type: integer
                    format: int32
                    example: 400
                  message:
                    description: "そのまま表示して良いエラーメッセージ"
                    type: string
                    example: "不正なページ番号です"
  "/user/lottery":
    get:
      description: "ユーザ抽選"
      tags:
        - userdata
      operationId: "getUserLottery"
      responses:
        "200":
          description: "ユーザ情報"
          headers:
            X-User-ID:
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    properties:
                      userId:
                        description: "ユーザID"
                        type: integer
                        format: int64
                        example: 1
                      userName:
                        description: "ユーザ名"
                        type: string
                        example: "田中あいみ"
                  - type: object
                    properties:
                      userId:
                        description: "ユーザID"
                        type: integer
                        format: int64
                        example: 2
                      userName:
                        description: "ユーザ名"
                        type: string
                        example: "悠木碧"
  "/user/detail/{userId}":
    get:
      description: "ユーザ詳細取得"
      tags:
        - userdata
      operationId: "getUserDetail"
      parameters:
        - name: userId
          in: path
          description: "ユーザID"
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        "200":
          description: "ユーザ詳細"
          headers:
            X-User-ID:
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    description: "ユーザID"
                    type: integer
                    format: int64
                    example: 1
                  userName:
                    description: "ユーザ名"
                    type: string
                    example: "田中あいみ"
                  nickname:
                    description: "表示ユーザ名"
                    type: string
                    example: "土間うまる"
        "404":
          description: "指定ユーザなし"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    description: "リクエストのユーザID"
                    type: string
                    example: 0
        default:
          description: "200と404以外 (なんか致命的エラー)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: "エラーコード"
                    type: integer
                    format: int32
                    example: 400
                  message:
                    description: "そのまま表示して良いエラーメッセージ"
                    type: string
                    example: "不正なユーザIDです"
  "/user/create":
    post:
      description: "ユーザ登録"
      tags:
        - signup
      operationId: "createNewUser"
      parameters:
        - name: category
          in: query
          description: "対象カテゴリ"
          required: true
          schema:
            type: integer
            format: int32
            example: 21
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                loginId:
                  description: "ログインID"
                  type: string
                  example: "loginid1"
                password:
                  description: "ログインパスワード"
                  type: string
                  format: password
                  example: "passwd1"
      responses:
        "200":
          description: "ユーザ登録成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: "ステータスコード"
                    type: integer
                    format: int32
                    example: 200
                  userId:
                    description: "ユーザID"
                    type: integer
                    format: int64
                    example: 2
                  message:
                    description: "そのまま表示して良いメッセージ"
                    type: string
                    example: "登録しました"
        "400":
          description: "ユーザ登録失敗(既存ユーザ有)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: "エラーコード"
                    type: integer
                    format: int32
                    example: 400
                  message:
                    description: "そのまま表示して良いエラーメッセージ"
                    type: string
                    example: "8文字以上のパスワードを設定してください"
        default:
          description: "200と400以外 (なんか致命的エラー)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: "エラーコード"
                    type: integer
                    format: int32
                    example: 403
                  message:
                    description: "そのまま表示して良いエラーメッセージ"
                    type: string
                    example: "トークンの期限切れです"
components:
  schemas:
    User:
      properties:
        id:
          type: integer
        name:
          type: string
